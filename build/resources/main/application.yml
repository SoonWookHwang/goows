spring:
  application:
    name: goows
  profiles:
    active: dev
---
spring:
  config:
    activate:
      on-profile: dev
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        show_sql: true
  kafka:
    bootstrap-servers: ${KAFKA_URL}
    consumer:
#      group-id: test-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
        #      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      #      value-serializer: org.apache.kafka.common.serialization.StringSerializer
jwt:
  secret: ${JWT_SECRET}
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /docs
  default-produces-media-type: application/json
naver:
  api:
    client_id: ${NAVER_CLIENT_ID}
    client_secret: ${NAVER_SECRETKEY}
    news-url: ${NAVER_URL}

---
spring:
  config:
    activate:
      on-profile: prod
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  datasource:
    url: jdbc:mariadb://prod-mysql.mydomain.com:3306/goows
    username: goows_prod
    password: secure-prod-password
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MariaDBDialect
        format_sql: true
        show_sql: false
  kafka:
    bootstrap-servers: ${KAFKA_URL}
    consumer:
#      group-id: test-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
jwt:
  secret: ${JWT_SECRET}


---

spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      enabled: true         # ?? ?? ??
      path: /h2-console     # ?? ?? (???: /h2-console)
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        show_sql: true

jwt:
  secret: testtesttesttesttesttesttesttest

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator: debug